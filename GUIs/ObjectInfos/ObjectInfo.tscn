[gd_scene load_steps=13 format=2]

[ext_resource path="res://AstronomicalObjects/Satellites/Satellite.tscn" type="PackedScene" id=1]
[ext_resource path="res://GUIs/ObjectInfos/ObjectPropertyPanels/ObjectPropertyPanel.tscn" type="PackedScene" id=2]
[ext_resource path="res://GUIs/ObjectInfos/ObjectInfo.gd" type="Script" id=3]
[ext_resource path="res://GUIs/ObjectInfos/SubmoduleIcons/ShieldIcon.tscn" type="PackedScene" id=5]
[ext_resource path="res://GUIs/ObjectInfos/ViewportObjectScene.tscn" type="PackedScene" id=7]
[ext_resource path="res://assets/Icons/energy_shield.png" type="Texture" id=10]
[ext_resource path="res://GUIs/ObjectInfos/SubmoduleIcons/LaserIcon.tscn" type="PackedScene" id=11]
[ext_resource path="res://GUIs/ObjectInfos/SubmoduleIcons/TelemetryIcon.tscn" type="PackedScene" id=12]

[sub_resource type="ViewportTexture" id=1]
viewport_path = NodePath("Object/Viewport")

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;


const float PI = 3.14159265358979323846;
uniform float ROTATIONAL_SPEED = 3.;
uniform float FRAMEBORDER = .025;
uniform float LOOPDELOOPS = 1.;
uniform float HP_PERCENT = .75;
uniform float ICON_DISTANCE = 1.2;
uniform vec4 HP_COLOR = vec4(.5,0.,.25,1.);
uniform int STATUS; //0-OK 1-ALERT 2-DESTROYED

uniform float ZOOM = 1.;
uniform vec4 WAVE_COLOR = vec4(1.);
uniform float WAVE_SPEED = 1.;
uniform float PULSE_RADIUS = 1;
uniform float EMISSION_SIZE = 1.;
uniform float ICON_WAVE_MIX = .95;

uniform vec2 SPAWN = vec2(.5);
uniform vec2 SPAWN_RANDOM = vec2(.0);

vec2 rotateUV(vec2 uv, vec2 pivot, float rotation) {
    float cosa = cos(rotation);
    float sina = sin(rotation);
    uv -= pivot;
    return vec2(
        cosa * uv.x - sina * uv.y,
        cosa * uv.y + sina * uv.x 
    ) + pivot;
}
vec4 createRing(vec2 uv,vec4 color){

    float x = (uv.x - 0.5) * 2.;
    float y = (uv.y - 0.5) * 2.;
    float d = sqrt(x * x + y * y);
    if(d > 1. - FRAMEBORDER && d < 1.) {
        float theta = atan(y, x) / PI;
        float b = (theta * 0.5) + 0.5;
        if(b < HP_PERCENT * 0.5 + 0.5){
            return HP_COLOR;
        }
    }
    return color;
}

vec4 pulsify(vec4 icon,vec2 uv,vec2 spawn,float time){
    if(icon.a !=0.){
        time = time * WAVE_SPEED;
        // Set the center point and thickness in pixels of the pulse effect
        vec2 p = uv -spawn;
        
        float r = length(p) / ZOOM;
        
        float a = pow(r, 2.0);
        float b = sin(r * PULSE_RADIUS - 1.6);
        float c = sin(r - 1.010) ;
        float s = sin(a - time+ b);
        
        vec3 color = WAVE_COLOR.rgb * abs(1.0 / (s / EMISSION_SIZE));
        return vec4(color*EMISSION_SIZE,1.);
    }
}


void fragment() {
    
    vec2 uv = UV;
    vec2 center = vec2(0.5);
    if(STATUS == 1){uv = rotateUV(uv,center,PI*sin(TIME*ROTATIONAL_SPEED/LOOPDELOOPS)*LOOPDELOOPS);}
    vec4 icon = texture(TEXTURE, uv*ICON_DISTANCE - (ICON_DISTANCE-1.)/2.);
    //create pulse
    vec2 spawnpoint= SPAWN + vec2(sin(TIME),cos(TIME))*SPAWN_RANDOM;
    icon = mix(pulsify(icon,uv,spawnpoint,TIME),icon,ICON_WAVE_MIX);
    //cutout
    COLOR.a = step(distance(center,uv),0.5);
    //create Rings
    COLOR = createRing(uv,icon);
}"

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/ROTATIONAL_SPEED = 3.0
shader_param/FRAMEBORDER = 0.025
shader_param/LOOPDELOOPS = 1.0
shader_param/HP_PERCENT = 0.75
shader_param/ICON_DISTANCE = 1.2
shader_param/HP_COLOR = Plane( 0, 0.75, 0.75, 1 )
shader_param/STATUS = 0
shader_param/ZOOM = 0.182
shader_param/WAVE_COLOR = Plane( 1.022, 0.062, 0.359, 0.036 )
shader_param/WAVE_SPEED = 1.0
shader_param/PULSE_RADIUS = 1.0
shader_param/EMISSION_SIZE = 2.33
shader_param/ICON_WAVE_MIX = 0.871
shader_param/SPAWN = Vector2( 0.5, 0.5 )
shader_param/SPAWN_RANDOM = Vector2( 0, 0 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/ROTATIONAL_SPEED = 3.0
shader_param/FRAMEBORDER = 0.025
shader_param/LOOPDELOOPS = 1.0
shader_param/HP_PERCENT = 0.75
shader_param/ICON_DISTANCE = 1.2
shader_param/HP_COLOR = Plane( 0, 0.75, 0.75, 1 )
shader_param/STATUS = 0
shader_param/ZOOM = 0.02
shader_param/WAVE_COLOR = Plane( 0.732, 0.115, 0.83, 1 )
shader_param/WAVE_SPEED = 1.0
shader_param/PULSE_RADIUS = 1.0
shader_param/EMISSION_SIZE = 1.0
shader_param/ICON_WAVE_MIX = 0.799
shader_param/SPAWN = Vector2( 0.5, 0.5 )
shader_param/SPAWN_RANDOM = Vector2( 0, 0 )

[node name="MarginContainer" type="MarginContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Satellite" parent="." instance=ExtResource( 1 )]
direction = Vector3( 0, 0, 0 )
active = true
solar_mass = 1.0

[node name="Object" type="Sprite" parent="."]
scale = Vector2( 0.25, 0.25 )
texture = SubResource( 1 )
centered = false

[node name="Viewport" type="Viewport" parent="Object"]
size = Vector2( 4096, 2400 )
transparent_bg = true
msaa = 2
hdr = false
usage = 3

[node name="ViewportObjectScene" parent="Object/Viewport" instance=ExtResource( 7 )]

[node name="HBoxContainer" type="HBoxContainer" parent="."]
margin_right = 1024.0
margin_bottom = 600.0

[node name="Node2D" parent="HBoxContainer" instance=ExtResource( 2 )]
margin_bottom = 600.0

[node name="Lazer" parent="HBoxContainer" instance=ExtResource( 11 )]
position = Vector2( 539.103, 103.671 )
scale = Vector2( 0.25, 0.25 )
z_index = 1

[node name="Telemetry" parent="HBoxContainer" instance=ExtResource( 12 )]
position = Vector2( 547.042, 471.259 )
scale = Vector2( 0.25, 0.25 )

[node name="Shield2" parent="HBoxContainer" instance=ExtResource( 5 )]
material = SubResource( 3 )
position = Vector2( 893.647, 466.231 )
scale = Vector2( 0.25, 0.25 )

[node name="Shield" type="Sprite" parent="HBoxContainer"]
material = SubResource( 4 )
position = Vector2( 901.878, 106.548 )
scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 10 )
