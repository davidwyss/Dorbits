[gd_scene load_steps=14 format=2]

[ext_resource path="res://GUIs/SatelliteInfos/SatelliteInfo.gd" type="Script" id=1]
[ext_resource path="res://GUIs/SatelliteInfos/SubmoduleIcons/TransmissionIcon.tscn" type="PackedScene" id=3]
[ext_resource path="res://GUIs/SatelliteInfos/GalacticCoordinates.gd" type="Script" id=4]
[ext_resource path="res://GUIs/SatelliteInfos/SubmoduleIcons/ShieldIcon.tscn" type="PackedScene" id=5]
[ext_resource path="res://GUIs/SatelliteInfos/EnergyGraphs/EnergyGraph.tscn" type="PackedScene" id=6]
[ext_resource path="res://GUIs/SatelliteInfos/Storages/Storage.tscn" type="PackedScene" id=7]
[ext_resource path="res://GUIs/SatelliteInfos/Storages/StorageMaterialShard.tscn" type="PackedScene" id=8]
[ext_resource path="res://GUIs/SatelliteInfos/SubmoduleIcons/LaserIcon.tscn" type="PackedScene" id=11]
[ext_resource path="res://GUIs/SatelliteInfos/SubmoduleIcons/TelemetryIcon.tscn" type="PackedScene" id=12]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;


const float PI = 3.14159265358979323846;
uniform float ROTATIONAL_SPEED = 3.;
uniform float FRAMEBORDER = .025;
uniform float LOOPDELOOPS = 1.;
uniform float HP_PERCENT = .75;
uniform float ICON_DISTANCE = 1.2;
uniform vec4 HP_COLOR = vec4(.5,0.,.25,1.);
uniform int STATUS; //0-OK 1-ALERT 2-DESTROYED

uniform float ZOOM = 1.;
uniform vec4 WAVE_COLOR = vec4(1.);
uniform float WAVE_SPEED = 1.;
uniform float PULSE_RADIUS = 1;
uniform float EMISSION_SIZE = 1.;
uniform float ICON_WAVE_MIX = .95;

uniform vec2 SPAWN = vec2(.5);
uniform vec2 SPAWN_RANDOM = vec2(.0);

vec2 rotateUV(vec2 uv, vec2 pivot, float rotation) {
    float cosa = cos(rotation);
    float sina = sin(rotation);
    uv -= pivot;
    return vec2(
        cosa * uv.x - sina * uv.y,
        cosa * uv.y + sina * uv.x 
    ) + pivot;
}
vec4 createRing(vec2 uv,vec4 color){

    float x = (uv.x - 0.5) * 2.;
    float y = (uv.y - 0.5) * 2.;
    float d = sqrt(x * x + y * y);
    if(d > 1. - FRAMEBORDER && d < 1.) {
        float theta = atan(y, x) / PI;
        float b = (theta * 0.5) + 0.5;
        if(b < HP_PERCENT * 0.5 + 0.5){
            return HP_COLOR;
        }
    }
    return color;
}

vec4 pulsify(vec4 icon,vec2 uv,vec2 spawn,float time){
    if(icon.a !=0.){
        time = time * WAVE_SPEED;
        // Set the center point and thickness in pixels of the pulse effect
        vec2 p = uv -spawn;
        
        float r = length(p) / ZOOM;
        
        float a = pow(r, 2.0);
        float b = sin(r * PULSE_RADIUS - 1.6);
        float c = sin(r - 1.010) ;
        float s = sin(a - time+ b);
        
        vec3 color = WAVE_COLOR.rgb * abs(1.0 / (s / EMISSION_SIZE));
        return vec4(color*EMISSION_SIZE,1.);
    }
}


void fragment() {
    
    vec2 uv = UV;
    vec2 center = vec2(0.5);
    if(STATUS == 1){uv = rotateUV(uv,center,PI*sin(TIME*ROTATIONAL_SPEED/LOOPDELOOPS)*LOOPDELOOPS);}
    vec4 icon = texture(TEXTURE, uv*ICON_DISTANCE - (ICON_DISTANCE-1.)/2.);
    //create pulse
    vec2 spawnpoint= SPAWN + vec2(sin(TIME),cos(TIME))*SPAWN_RANDOM;
    icon = mix(pulsify(icon,uv,spawnpoint,TIME),icon,ICON_WAVE_MIX);
    //cutout
    COLOR.a = step(distance(center,uv),0.5);
    //create Rings
    COLOR = createRing(uv,icon);
}"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/ROTATIONAL_SPEED = 3.0
shader_param/FRAMEBORDER = 0.025
shader_param/LOOPDELOOPS = 1.0
shader_param/HP_PERCENT = 0.75
shader_param/ICON_DISTANCE = 1.2
shader_param/HP_COLOR = Plane( 0, 0.75, 0.75, 1 )
shader_param/STATUS = 0
shader_param/ZOOM = 0.182
shader_param/WAVE_COLOR = Plane( 1.022, 0.062, 0.359, 0.036 )
shader_param/WAVE_SPEED = 1.0
shader_param/PULSE_RADIUS = 1.0
shader_param/EMISSION_SIZE = 2.33
shader_param/ICON_WAVE_MIX = 0.871
shader_param/SPAWN = Vector2( 0.5, 0.5 )
shader_param/SPAWN_RANDOM = Vector2( 0, 0 )

[sub_resource type="DynamicFontData" id=3]
font_path = "res://assets/Fonts/Xolonium-Regular.ttf"

[sub_resource type="DynamicFont" id=4]
resource_local_to_scene = true
size = 33
outline_size = 1
outline_color = Color( 0.686275, 0, 1, 1 )
font_data = SubResource( 3 )

[node name="SatelliteInfo" type="Node2D"]
script = ExtResource( 1 )

[node name="SatelliteInfoList" type="HBoxContainer" parent="."]
margin_top = 333.0
margin_right = 1024.0
margin_bottom = 397.0
rect_min_size = Vector2( 0, 64 )
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBOX" type="HBoxContainer" parent="SatelliteInfoList"]
margin_left = 177.0
margin_right = 445.0
margin_bottom = 64.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Lazer" parent="SatelliteInfoList/HBOX" instance=ExtResource( 11 )]
margin_right = 64.0
margin_bottom = 64.0
rect_min_size = Vector2( 64, 64 )

[node name="Telemetry" parent="SatelliteInfoList/HBOX" instance=ExtResource( 12 )]
margin_left = 68.0
margin_right = 132.0
margin_bottom = 64.0
rect_min_size = Vector2( 64, 64 )

[node name="Shield" parent="SatelliteInfoList/HBOX" instance=ExtResource( 5 )]
material = SubResource( 2 )
margin_left = 136.0
margin_right = 200.0
margin_bottom = 64.0
rect_min_size = Vector2( 64, 64 )

[node name="Transmission" parent="SatelliteInfoList/HBOX" instance=ExtResource( 3 )]
margin_left = 204.0
margin_right = 268.0
margin_bottom = 64.0
rect_min_size = Vector2( 64, 64 )

[node name="EnergyBar" parent="SatelliteInfoList" instance=ExtResource( 6 )]
margin_left = 449.0
margin_right = 699.0
margin_bottom = 64.0
rect_min_size = Vector2( 250, 64 )

[node name="MaterialPie" parent="SatelliteInfoList" instance=ExtResource( 7 )]
margin_left = 703.0
margin_right = 767.0
margin_bottom = 64.0
rect_min_size = Vector2( 64, 64 )
shardClass = ExtResource( 8 )
radius_modifier = 1.0

[node name="GC" type="Label" parent="SatelliteInfoList"]
margin_left = 771.0
margin_top = 12.0
margin_right = 847.0
margin_bottom = 52.0
custom_fonts/font = SubResource( 4 )
custom_colors/font_color = Color( 0.00392157, 1, 0, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
text = "GPS"
align = 1
valign = 1
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}
